1. https://upmostly.com/tutorials/how-to-post-requests-react
    What is the difference between PUT and POST?
    PUT modifies data. POST saves it in the backend.

2. Why does react create index.js and app.js?
    https://stackoverflow.com/questions/50493069/why-does-create-react-app-creates-both-app-js-and-index-js
    "index.js is the traditional [ENTRY POINT]."

    "App.js on the other hand [merely functions as the FIRST COMPONENT] of the react app because every view and component are handled with hierarchy in React,
     where <App /> is the top most component in the hierarchy. This gives you the feel that you maintain hierarchy in your code starting from 
     App.js."

3. Do I need to use classes in React anymore?
    No. According to the authority below, 'hooks' remain the modern preference above classes for structuring your React app.
    https://www.w3schools.com/react/react_class.asp
    "With the addition of Hooks, Function components are now almost equivalent to Class components. The differences are so minor that you will 
    probably never need to use a Class component in React.
    Even though Function components are preferred, there are no current plans on removing Class components from React."

4. How does one implement Axios content in React?
    https://www.freecodecamp.org/news/how-to-use-axios-with-react/
    
5. The following error rears its ugly head once again:
    "webpack < 5 used to include polyfills for node.js core modules by default.
    This is no longer the case. Verify if you need this module and configure a polyfill for it."

    https://stackoverflow.com/questions/46239109/axios-version-package-json
    You may need to uninstall axios first, but the command "npm install axios@0.26.1" seemed to fix it for me.

6. This is for later: Integrate POSTGRESQL with FLASK:
    https://www.digitalocean.com/community/tutorials/how-to-use-a-postgresql-database-in-a-flask-application

7. I capitalized the user object in the constructor for the takeinput class. It caused an error on lines 74+ because
    the interpreter/compiler could no longer recognize the user object. Object naming conventions appear to be 
    case sensitive in react.

8. I'm testing a different author's method for help in connecting the React to the Flask.
    https://dev.to/dev_elie/connecting-a-react-frontend-to-a-flask-backend-h1o

    I don't want to connect in the way the above other shows. I want to connect to my existing postgresql database.
    https://www.geeksforgeeks.org/connecting-postgresql-with-sqlalchemy-in-python/
    This is where the Hibernate got really hairy. I'm hoping to keep this as simple as possible, for now.

9. What is Flask SQLAlchemy?
    https://pythonbasics.org/flask-sqlalchemy/
    It's another ORM for supposedly assisting with managing SQL queries and databases (equivalent to Spring's Hibernate).
    I'm done with "helpers" right now. I need to simplify this stuff and worry about adding complexity later.

10. I'm testing this young lady's code with mine to see if I can get the JSON to work.
    https://towardsdatascience.com/build-deploy-a-react-flask-app-47a89a5d17d9
    
11. A tidbit from the documentation on parser in flask_restful.
    https://flask-restful.readthedocs.io/en/latest/reqparse.html

12. This is a little confounding as I see the CORS error pop up again despite the proxy setting in package.json and the CORS configuration
    hard-coded into the Python.
    https://www.telerik.com/blogs/dealing-with-cors-in-create-react-app
    I don't know if I need to call something in the setupProxy.js file because the way the article explains it,
    I don't see a function at all or a useEffect or hook.

13. I opened the author's code after downloading it from GitHub to see what would happen--for comparison and contrast.
    Her app runs in my browser such that I can see the interface but the same CORS error appears despite her configuration, too.

14. When I test the "flask run" command, I receive an error indicating I haven't set the flask environment variable on the machine and that the app.python
    module is missing. I thought I resolved this earlier today, but I"m still seeing the error.
    A run of the "echo $FLASK_APP" command shows pyServe.py as the environment variable, but I think there needs to be a root level path
    reflected.

15. Based on the following video and other articles or videos I've watched on this subject, and based on my own challenges with getting JSON
    to pass between the front and back end, I think I need to make my code more basic first before I try to pass in user input. I need to only
    test further the passing of data between the frontend and the backend.
    https://www.youtube.com/watch?v=7LNl2JlZKHA&t=3s&ab_channel=ArpanNeupane
    Afterward, I can try again to use the user input as the data to pass to the backend.

    See also: https://www.youtube.com/watch?v=cb1vy1HpVwk&ab_channel=THESHOW

16. Naturally, as if from nowhere, a new and bizarre issue is blocking access from Flask and React in the Chrome browser.
    https://stackoverflow.com/questions/67191286/crbug-1173575-non-js-module-files-deprecated-chromewebdata-index%EA%9E%89530595551
    I tried several things listed here, but so far no dice.
    https://stackoverflow.com/questions/67495792/where-is-the-launch-json-file-in-vs-code
    I'm not interested right now in asking VSCode to create a launch.json. If it doesn't exist yet, it can't that that's the problem here.

    Without explanation, the Flask end just connected on 127.0.0.1:5000/members. What on earth!?

    I recorded a HAR while resetting the React page connection. "react connection refused blocked" are some strings I put together from the HAR,
    which I saved to the desktop for now.

    I may try a Fiddler file or Wireshark tomorrow. This is freakin' asinine!

17. I caught a Wireshark capture with the loopback and eth0 enabled for capture. Before I turn to that for further analysis, I see that 
    my backend (Python) shows it's functioning but the React side isn't. I didn't see why until I navigated away from the devtools 
    network tab to the console.

    Uncaught type error: react_dom_client_webpack...render is not a function at ./src/index.js.

    There's an import I had configured in index.js that read: "import ReactDOM from 'react-dom/client';" I changed it to reflect that of the 
    video I've been following (above): "import ReactDOM from 'react-dom';" and finally, the frontend renders the test data from Python!

    I now have a warning showing in Chrome: "react-dom.development.js:86 Warning: ReactDOM.render is no longer supported in React 18. Use
     createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more:
      https://reactjs.org/link/switch-to-createroot".

18. While it's a great goal, I may need to begin with a static file of JSON data rather than trying to pass in user input from the 
    webpage at first.
    https://www.pluralsight.com/guides/load-and-render-json-data-into-react-components
    I don't care to display the data in the upcoming test, but it may not hurt to practice. I'll cross that bridge as I encounter it.
    For that matter, my own goals entail passing in user search strings and a file path, searching the directory (and subdirectories), and 
    returning results in a file or group of files (depending on size).
    For purposes of this test, I won't take user input, as stated. I'll save that for later. I'll just create two json objects and see if I 
    can either display those or pass them from React to Flask.

    The above tutorial has worked so far, though I needed to reorder the file imports because it wouldn't render. Namely, I needed to export
    UserDataTest.js rather than importing App.js into UserDatatTest.js. Specifically, App.js remains a parent to UserDataTest and the entire
    project, while index.js remains the top level or root file of my project.

19. While the last effort proved seemingly fruitless (it didn't do what I expected), I learned about displaying json in react and, equally
    important, how to manage some json therein. I found the following link, which I hope will help me send that json to Flask.
    https://javascript.plainenglish.io/sending-a-post-to-your-flask-api-from-a-react-js-app-6496692514e

    The above link contains the presentment in both the URL and the text of the article of plainness, but it isn't plain at all. The author
    explicitly targest new coders but leaves readers scrambling to find basic imports used in the code and which the author did not show.
